/*
给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。
请你计算并返回达到楼梯顶部的最低花费。
示例 1：
输入：cost = [10,15,20]
输出：15
解释：你将从下标为 1 的台阶开始。
- 支付 15 ，向上爬两个台阶，到达楼梯顶部。
总花费为 15 。
示例 2：
输入：cost = [1,100,1,1,1,100,1,1,100,1]
输出：6
解释：你将从下标为 0 的台阶开始。
- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
- 支付 1 ，向上爬一个台阶，到达楼梯顶部。
总花费为 6 。
*/
#include <vector>
#include <iostream>
using namespace std;
class Solution
{
public:
    /*
    动态规划五部曲
    1. 确定dp数组以及下标的含义
    dp[i]：表示从下标为0或下标为1的台阶开始爬楼梯到达楼梯i的位置的最小花费值
    2. 确定递推关系
    通过本题可以得知，一步可以跳一个台阶或者两个台阶，
    所以dp[i]由dp[i-1]跳了一步花费cost[i-1]得到或者dp[i-2]跳了两步花费cost[i-2]得到,
    并且求最小花费，所以再加一个min
    则递推关系为dp[i] = min(dp[i-1]+cost[i-1] + dp[i-2]+cost[i-2])
    3. 确定初始值
    可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯，所以初始化为0，之后再向上跳的时候才有花费
    dp[0] = 0;
    dp[1] = 0;
    4. 确定遍历顺序
    5. 举例推导dp数组
    */
    int minCostClimbingStairs(vector<int> &cost)
    {
        vector<int> dp(cost.size() + 1);
        dp[0] = 0;
        dp[1] = 0;
        for (int i = 2; i <= cost.size(); i++)
        {
            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]); // 从下标为0或下标为1的台阶开始爬楼梯到达楼梯i的位置的最小花费值 
        }
        return dp[cost.size()];
    }
};

int main()
{
    vector<int> cost = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1};
    Solution sol;
    cout << sol.minCostClimbingStairs(cost);
}